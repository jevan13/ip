package Yapper;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.Iterator;public class TaskList {    private final ArrayList<Task> listOfTask;    public final Storage storage;    public TaskList(ArrayList<Task> listOfTask, Storage storage) {        this.listOfTask = listOfTask;        this.storage = storage;    }    public static LocalDateTime stringToDateTime(String dateTime, int type) {        try {            String[] splitDateTime = dateTime.split(" ");            String date = splitDateTime[0];            String[] splitYearMonthDay = date.split("/");            String year = splitYearMonthDay[0];            String month = splitYearMonthDay[1];            String day = splitYearMonthDay[2];            LocalDateTime toReturn;            if (splitDateTime.length == 2) {                String time = splitDateTime[1];                String hour = time.substring(0, 2);                String minute = time.substring(2);                String toParse = String.format("%s-%s-%sT%s:%s", year, month, day, hour, minute);                toReturn = LocalDateTime.parse(toParse);            } else if (type == 0) {                String toParse = String.format("%s-%s-%sT00:00", year, month, day);                toReturn = LocalDateTime.parse(toParse);            } else if (type == 1) {                String toParse = String.format("%s-%s-%sT23:59", year, month, day);                toReturn = LocalDateTime.parse(toParse);            } else {                throw new YapperException("Error in stringToDateTime: Wrong Type");            }            return toReturn;        } catch (NumberFormatException var13) {            System.out.println("Error in stringToDateTime: Invalid Date Input");        } catch (YapperException var14) {            System.out.println(var14.getMessage());        }        return null;    }    public void deleteTask(String command) throws YapperException {        if (command.length() == 6) {            throw new YapperException("Task Number cannot be empty!");        } else {            String input = command.substring(7);            int order = Integer.parseInt(input);            if (order <= 0) {                throw new YapperException("Task Number cannot be less than 1!");            } else if (order > this.listOfTask.size()) {                throw new YapperException("Task Number cannot be more than size of list!");            } else {                Task task = this.listOfTask.get(order - 1);                this.listOfTask.remove(order - 1);                System.out.println("Noted. I've removed this task: \n" +                        task + "\n" + "Now you have " + this.listOfTask.size() + " tasks in the list");                this.storage.writeHistory(this.listOfTask);            }        }    }    public void addToDo(String command) throws YapperException {        if (!command.equals("todo") && !command.equals("todo ")) {            String input = command.substring(5);            ToDo todo = new ToDo(input);            this.addTask(todo);        } else {            throw new YapperException("Description for ToDo cannot be empty!");        }    }    public void addDeadline(String command) throws YapperException {        if (command.startsWith("deadline /by ")) {            throw new YapperException("Name for Deadline cannot be empty!");        } else {            String input = command.substring(9);            String[] split = input.split(" /by ");            if (!input.contains(" /by ")) {                throw new YapperException("Deadline require /by command with Deadline Time");            } else if (split.length == 1) {                throw new YapperException("Deadline Time is empty!");            } else {                LocalDateTime byDateTime = stringToDateTime(split[1], 1);                Deadline deadline = new Deadline(split[0], byDateTime);                this.addTask(deadline);            }        }    }    public void addEvent(String command) throws YapperException {        if (command.equals("event /from ")) {            throw new YapperException("Name for Event cannot be empty!");        } else {            String input = command.substring(6);            String[] split = input.split(" /from ");            String[] split2 = split[1].split(" /to ");            if (!input.contains(" /from ")) {                throw new YapperException("Event require /from command with Start Time");            } else if (!input.contains(" /to ")) {                throw new YapperException("Event require /to command with End Time");            } else if (split2[0].isEmpty()) {                throw new YapperException("Event Start Time is empty!");            } else if (split2[1].isEmpty()) {                throw new YapperException("Event End Time is empty!");            } else {                LocalDateTime fromDateTime = stringToDateTime(split2[0], 0);                LocalDateTime toDateTime = stringToDateTime(split2[1], 1);                Event event = new Event(split[0], fromDateTime, toDateTime);                this.addTask(event);            }        }    }    public void addTask(Task task) {        this.listOfTask.add(task);        System.out.println("Got it. I've added this task:\n" + task + "\nNow you have " + this.listOfTask.size() + " tasks in the list");        this.storage.writeHistory(this.listOfTask);    }    public void mark(String command) throws YapperException {        if (command.length() == 4) {            throw new YapperException("Task Number cannot be empty!");        } else {            String input = command.substring(5);            int order = Integer.parseInt(input);            if (order <= 0) {                throw new YapperException("Task Number cannot be less than 1!");            } else if (order > this.listOfTask.size()) {                throw new YapperException("Task Number cannot be more than size of list!");            } else {                Task taskToMark = (Task)this.listOfTask.get(order - 1);                taskToMark.setDone(true);                System.out.println("Nice! I've marked this task as done: \n" + taskToMark);                this.storage.writeHistory(this.listOfTask);            }        }    }    public void unmark(String command) throws YapperException {        if (command.length() == 6) {            throw new YapperException("Task Number cannot be empty!");        } else {            String input = command.substring(7);            int order = Integer.parseInt(input);            if (order <= 0) {                throw new YapperException("Task Number cannot be less than 1!");            } else if (order > this.listOfTask.size()) {                throw new YapperException("Task Number cannot be more than size of list!");            } else {                Task taskToUnmark = (Task)this.listOfTask.get(order - 1);                taskToUnmark.setDone(false);                System.out.println("OK, I've marked this task as not done yet: \n" + taskToUnmark);                this.storage.writeHistory(this.listOfTask);            }        }    }    public void returnList() {        System.out.println("Here are the tasks in your list: ");        int order = 1;        for(Iterator var2 = this.listOfTask.iterator(); var2.hasNext(); ++order) {            Task task = (Task)var2.next();            System.out.println("" + order + "." + task);        }    }    public void exit() {        System.out.println("Yapper shall yap next time!");    }}